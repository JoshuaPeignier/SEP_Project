(* declaring a free channel name *)
free c:channel.

(* declaring additional types; type bitstring is a default type ; type key models symmetric keys*)
type key.
type identity.

(* declaring private names *)
free k_im, k_rm:key [private]. 

(* Symmetric key cryptography *)
fun senc(bitstring, key):bitstring. 	(* symmetric encryption *)
fun sdec(bitstring, key):bitstring.	(* symmetric decryption *)
fun h(bitstring):bitstring.		(* hash function *)
fun id(key):identity.			(* role associated to a symmetric key shared with the server *)


(* equational theory for symmetric encryption *)
equation forall x:bitstring, y:key; sdec(senc(x,y),y) = x.





(* events *)
	event reach.
	event acceptI(identity, identity, key,    (* bitstring, *) bitstring).
	event acceptR(identity, identity, key,    (* bitstring, *) bitstring).
	event startR(identity, identity, key,    (* bitstring, *) bitstring).
	event startI(identity, identity, key,    (* bitstring, *) bitstring).

(* queries *)
	query event(reach).
	query attacker(new k).
	query attacker(new n).
	query x:key, y:bitstring (*, z:bitstring *) ; event(acceptI(id(k_im),id(k_rm),x,y (*,z*) )) ==> event(startR(id(k_im),id(k_rm),x,y (*,z*) )). 
	query x:key, y:bitstring (*, z:bitstring *) ; event(acceptR(id(k_im),id(k_rm),x,y (*,z*) )) ==> event(startI(id(k_im),id(k_rm),x,y (*,z*) )).      





(* initiator process *)
let Pi(ki:key, r:identity) = 
	 new k:key;
	 (*   new nonce_i:bitstring;    *) 
	 out(c, senc((k,r   (* ,nonce_i *)   ), ki));
	 in(c, x:bitstring);
	 let (    (* =nonce_i, *)    n:bitstring) = sdec(x, k) in 
	 event startI(id(ki),r,k,n (*,nonce_i*)  );
	 out(c, h(n));
	 event acceptI(id(ki),r,k,n (*,nonce_i*)  ).
	 

(* responder process *)
let Pr (kr:key)= in(c, x:bitstring);
		  let (  (* ni:bitstring,*)  i:identity , k:key) = sdec(x, kr) in
		  new n:bitstring;
		  event startR(i,id(kr),k,n  (*,ni*)  );
		  out(c, senc((  (*ni,*)  n),k) );
		  in(c, y:bitstring);
		  let (=h(n)) = y in 
		  event reach;
		  event acceptR(i,id(kr),k,n  (*,ni*)  ).


(* server process *)
let Pm (ki:key,kr:key) = in(c, x:bitstring);
	 	  let (k:key , =id(kr)  (* , ni:bitstring *)    ) = sdec(x,ki) in
		  out(c, senc((  (*ni,*)  id(ki),k),kr)).




(* main process *)
process  ( Pi(k_im, id(k_rm)) | Pr(k_rm) | Pm(k_im,k_rm) )
